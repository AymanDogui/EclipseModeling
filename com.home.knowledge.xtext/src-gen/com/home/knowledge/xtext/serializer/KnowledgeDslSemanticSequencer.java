/*
 * generated by Xtext 2.10.0
 */
package com.home.knowledge.xtext.serializer;

import com.google.inject.Inject;
import com.home.knowledge.MExperience;
import com.home.knowledge.MKnowledgePackage;
import com.home.knowledge.MOrganisation;
import com.home.knowledge.MProblem;
import com.home.knowledge.MSolution;
import com.home.knowledge.xtext.services.KnowledgeDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class KnowledgeDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private KnowledgeDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MKnowledgePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MKnowledgePackage.EXPERIENCE:
				sequence_Experience(context, (MExperience) semanticObject); 
				return; 
			case MKnowledgePackage.ORGANISATION:
				sequence_Organisation(context, (MOrganisation) semanticObject); 
				return; 
			case MKnowledgePackage.PROBLEM:
				sequence_Problem(context, (MProblem) semanticObject); 
				return; 
			case MKnowledgePackage.SOLUTION:
				sequence_Solution(context, (MSolution) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Experience returns Experience
	 *
	 * Constraint:
	 *     (name=EString (problems+=Problem problems+=Problem*)? solutions+=Solution solutions+=Solution*)
	 */
	protected void sequence_Experience(ISerializationContext context, MExperience semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Organisation returns Organisation
	 *
	 * Constraint:
	 *     (name=EString currentProblem=[Problem|EString]? (experiences+=Experience experiences+=Experience*)?)
	 */
	protected void sequence_Organisation(ISerializationContext context, MOrganisation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Problem returns Problem
	 *
	 * Constraint:
	 *     (name=EString solutions+=Solution solutions+=Solution*)
	 */
	protected void sequence_Problem(ISerializationContext context, MProblem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Solution returns Solution
	 *
	 * Constraint:
	 *     (name=EString description=EString?)
	 */
	protected void sequence_Solution(ISerializationContext context, MSolution semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
