/**
 * generated by Xtext 2.10.0
 */
package com.home.rh.xtext.rhDsl.impl;

import com.home.rh.xtext.rhDsl.DurationType;
import com.home.rh.xtext.rhDsl.Employee;
import com.home.rh.xtext.rhDsl.RhDslPackage;
import com.home.rh.xtext.rhDsl.Task;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Task</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.home.rh.xtext.rhDsl.impl.TaskImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.home.rh.xtext.rhDsl.impl.TaskImpl#getResponsable <em>Responsable</em>}</li>
 *   <li>{@link com.home.rh.xtext.rhDsl.impl.TaskImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link com.home.rh.xtext.rhDsl.impl.TaskImpl#getStartDate <em>Start Date</em>}</li>
 *   <li>{@link com.home.rh.xtext.rhDsl.impl.TaskImpl#getDuration <em>Duration</em>}</li>
 *   <li>{@link com.home.rh.xtext.rhDsl.impl.TaskImpl#getDurationType <em>Duration Type</em>}</li>
 *   <li>{@link com.home.rh.xtext.rhDsl.impl.TaskImpl#getSubtasks <em>Subtasks</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TaskImpl extends MinimalEObjectImpl.Container implements Task
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getResponsable() <em>Responsable</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResponsable()
   * @generated
   * @ordered
   */
  protected Employee responsable;

  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The default value of the '{@link #getStartDate() <em>Start Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartDate()
   * @generated
   * @ordered
   */
  protected static final String START_DATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStartDate() <em>Start Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartDate()
   * @generated
   * @ordered
   */
  protected String startDate = START_DATE_EDEFAULT;

  /**
   * The default value of the '{@link #getDuration() <em>Duration</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDuration()
   * @generated
   * @ordered
   */
  protected static final int DURATION_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getDuration() <em>Duration</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDuration()
   * @generated
   * @ordered
   */
  protected int duration = DURATION_EDEFAULT;

  /**
   * The default value of the '{@link #getDurationType() <em>Duration Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDurationType()
   * @generated
   * @ordered
   */
  protected static final DurationType DURATION_TYPE_EDEFAULT = DurationType.HOURS;

  /**
   * The cached value of the '{@link #getDurationType() <em>Duration Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDurationType()
   * @generated
   * @ordered
   */
  protected DurationType durationType = DURATION_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getSubtasks() <em>Subtasks</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubtasks()
   * @generated
   * @ordered
   */
  protected EList<Task> subtasks;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TaskImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RhDslPackage.Literals.TASK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RhDslPackage.TASK__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Employee getResponsable()
  {
    if (responsable != null && responsable.eIsProxy())
    {
      InternalEObject oldResponsable = (InternalEObject)responsable;
      responsable = (Employee)eResolveProxy(oldResponsable);
      if (responsable != oldResponsable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RhDslPackage.TASK__RESPONSABLE, oldResponsable, responsable));
      }
    }
    return responsable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Employee basicGetResponsable()
  {
    return responsable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setResponsable(Employee newResponsable)
  {
    Employee oldResponsable = responsable;
    responsable = newResponsable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RhDslPackage.TASK__RESPONSABLE, oldResponsable, responsable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RhDslPackage.TASK__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getStartDate()
  {
    return startDate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStartDate(String newStartDate)
  {
    String oldStartDate = startDate;
    startDate = newStartDate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RhDslPackage.TASK__START_DATE, oldStartDate, startDate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getDuration()
  {
    return duration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDuration(int newDuration)
  {
    int oldDuration = duration;
    duration = newDuration;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RhDslPackage.TASK__DURATION, oldDuration, duration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DurationType getDurationType()
  {
    return durationType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDurationType(DurationType newDurationType)
  {
    DurationType oldDurationType = durationType;
    durationType = newDurationType == null ? DURATION_TYPE_EDEFAULT : newDurationType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RhDslPackage.TASK__DURATION_TYPE, oldDurationType, durationType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Task> getSubtasks()
  {
    if (subtasks == null)
    {
      subtasks = new EObjectContainmentEList<Task>(Task.class, this, RhDslPackage.TASK__SUBTASKS);
    }
    return subtasks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RhDslPackage.TASK__SUBTASKS:
        return ((InternalEList<?>)getSubtasks()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RhDslPackage.TASK__NAME:
        return getName();
      case RhDslPackage.TASK__RESPONSABLE:
        if (resolve) return getResponsable();
        return basicGetResponsable();
      case RhDslPackage.TASK__DESCRIPTION:
        return getDescription();
      case RhDslPackage.TASK__START_DATE:
        return getStartDate();
      case RhDslPackage.TASK__DURATION:
        return getDuration();
      case RhDslPackage.TASK__DURATION_TYPE:
        return getDurationType();
      case RhDslPackage.TASK__SUBTASKS:
        return getSubtasks();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RhDslPackage.TASK__NAME:
        setName((String)newValue);
        return;
      case RhDslPackage.TASK__RESPONSABLE:
        setResponsable((Employee)newValue);
        return;
      case RhDslPackage.TASK__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case RhDslPackage.TASK__START_DATE:
        setStartDate((String)newValue);
        return;
      case RhDslPackage.TASK__DURATION:
        setDuration((Integer)newValue);
        return;
      case RhDslPackage.TASK__DURATION_TYPE:
        setDurationType((DurationType)newValue);
        return;
      case RhDslPackage.TASK__SUBTASKS:
        getSubtasks().clear();
        getSubtasks().addAll((Collection<? extends Task>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RhDslPackage.TASK__NAME:
        setName(NAME_EDEFAULT);
        return;
      case RhDslPackage.TASK__RESPONSABLE:
        setResponsable((Employee)null);
        return;
      case RhDslPackage.TASK__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case RhDslPackage.TASK__START_DATE:
        setStartDate(START_DATE_EDEFAULT);
        return;
      case RhDslPackage.TASK__DURATION:
        setDuration(DURATION_EDEFAULT);
        return;
      case RhDslPackage.TASK__DURATION_TYPE:
        setDurationType(DURATION_TYPE_EDEFAULT);
        return;
      case RhDslPackage.TASK__SUBTASKS:
        getSubtasks().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RhDslPackage.TASK__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case RhDslPackage.TASK__RESPONSABLE:
        return responsable != null;
      case RhDslPackage.TASK__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case RhDslPackage.TASK__START_DATE:
        return START_DATE_EDEFAULT == null ? startDate != null : !START_DATE_EDEFAULT.equals(startDate);
      case RhDslPackage.TASK__DURATION:
        return duration != DURATION_EDEFAULT;
      case RhDslPackage.TASK__DURATION_TYPE:
        return durationType != DURATION_TYPE_EDEFAULT;
      case RhDslPackage.TASK__SUBTASKS:
        return subtasks != null && !subtasks.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", description: ");
    result.append(description);
    result.append(", startDate: ");
    result.append(startDate);
    result.append(", duration: ");
    result.append(duration);
    result.append(", durationType: ");
    result.append(durationType);
    result.append(')');
    return result.toString();
  }

} //TaskImpl
