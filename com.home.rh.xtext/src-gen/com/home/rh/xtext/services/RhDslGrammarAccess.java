/*
 * generated by Xtext 2.10.0
 */
package com.home.rh.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RhDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CompanyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.home.rh.xtext.RhDsl.Company");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompanyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCompanyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEmployeesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cEmployeesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cEmployeesEmployeeParserRuleCall_4_2_0 = (RuleCall)cEmployeesAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cProjectsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cProjectsProjectParserRuleCall_5_0 = (RuleCall)cProjectsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Company:
		//	{Company}
		//	'Company'
		//	name=ID
		//	'{' ('employees' '{' employees+=Employee* '}') projects+=Project*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Company} 'Company' name=ID '{' ('employees' '{' employees+=Employee* '}') projects+=Project* '}'
		public Group getGroup() { return cGroup; }
		
		//{Company}
		public Action getCompanyAction_0() { return cCompanyAction_0; }
		
		//'Company'
		public Keyword getCompanyKeyword_1() { return cCompanyKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('employees' '{' employees+=Employee* '}')
		public Group getGroup_4() { return cGroup_4; }
		
		//'employees'
		public Keyword getEmployeesKeyword_4_0() { return cEmployeesKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//employees+=Employee*
		public Assignment getEmployeesAssignment_4_2() { return cEmployeesAssignment_4_2; }
		
		//Employee
		public RuleCall getEmployeesEmployeeParserRuleCall_4_2_0() { return cEmployeesEmployeeParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
		
		//projects+=Project*
		public Assignment getProjectsAssignment_5() { return cProjectsAssignment_5; }
		
		//Project
		public RuleCall getProjectsProjectParserRuleCall_5_0() { return cProjectsProjectParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EmployeeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.home.rh.xtext.RhDsl.Employee");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmployeeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWeightKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWeightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWeightINTTerminalRuleCall_2_1_0 = (RuleCall)cWeightAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHeightKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cHeightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cHeightINTTerminalRuleCall_3_1_0 = (RuleCall)cHeightAssignment_3_1.eContents().get(0);
		
		//Employee:
		//	'Employee'
		//	name=ID ('weight' weight=INT)? ('height' height=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Employee' name=ID ('weight' weight=INT)? ('height' height=INT)?
		public Group getGroup() { return cGroup; }
		
		//'Employee'
		public Keyword getEmployeeKeyword_0() { return cEmployeeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('weight' weight=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'weight'
		public Keyword getWeightKeyword_2_0() { return cWeightKeyword_2_0; }
		
		//weight=INT
		public Assignment getWeightAssignment_2_1() { return cWeightAssignment_2_1; }
		
		//INT
		public RuleCall getWeightINTTerminalRuleCall_2_1_0() { return cWeightINTTerminalRuleCall_2_1_0; }
		
		//('height' height=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'height'
		public Keyword getHeightKeyword_3_0() { return cHeightKeyword_3_0; }
		
		//height=INT
		public Assignment getHeightAssignment_3_1() { return cHeightAssignment_3_1; }
		
		//INT
		public RuleCall getHeightINTTerminalRuleCall_3_1_0() { return cHeightINTTerminalRuleCall_3_1_0; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.home.rh.xtext.RhDsl.Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTasksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTasksTaskParserRuleCall_4_0 = (RuleCall)cTasksAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Project:
		//	'Project'
		//	name=ID ('type' type=STRING)
		//	'{'
		//	tasks+=Task* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Project' name=ID ('type' type=STRING) '{' tasks+=Task* '}'
		public Group getGroup() { return cGroup; }
		
		//'Project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('type' type=STRING)
		public Group getGroup_2() { return cGroup_2; }
		
		//'type'
		public Keyword getTypeKeyword_2_0() { return cTypeKeyword_2_0; }
		
		//type=STRING
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_2_1_0() { return cTypeSTRINGTerminalRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//tasks+=Task*
		public Assignment getTasksAssignment_4() { return cTasksAssignment_4; }
		
		//Task
		public RuleCall getTasksTaskParserRuleCall_4_0() { return cTasksTaskParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.home.rh.xtext.RhDsl.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cResponsableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cResponsableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cResponsableEmployeeCrossReference_3_0 = (CrossReference)cResponsableAssignment_3.eContents().get(0);
		private final RuleCall cResponsableEmployeeIDTerminalRuleCall_3_0_1 = (RuleCall)cResponsableEmployeeCrossReference_3_0.eContents().get(1);
		private final Keyword cDescriptionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Keyword cStartDateKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStartDateAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStartDateDATETerminalRuleCall_7_0 = (RuleCall)cStartDateAssignment_7.eContents().get(0);
		private final Keyword cDurationKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDurationAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDurationINTTerminalRuleCall_9_0 = (RuleCall)cDurationAssignment_9.eContents().get(0);
		private final Assignment cDurationTypeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cDurationTypeDurationTypeEnumRuleCall_10_0 = (RuleCall)cDurationTypeAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cSubtasksKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cSubtasksAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cSubtasksTaskParserRuleCall_11_2_0 = (RuleCall)cSubtasksAssignment_11_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11_3 = (Keyword)cGroup_11.eContents().get(3);
		
		//Task:
		//	'Task'
		//	name=ID
		//	'responsable' responsable=[Employee]
		//	'description' description=STRING
		//	'startDate' startDate=DATE
		//	'duration' duration=INT durationType=DurationType ('subtasks' '{' subtasks+=Task* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Task' name=ID 'responsable' responsable=[Employee] 'description' description=STRING 'startDate' startDate=DATE
		//'duration' duration=INT durationType=DurationType ('subtasks' '{' subtasks+=Task* '}')?
		public Group getGroup() { return cGroup; }
		
		//'Task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'responsable'
		public Keyword getResponsableKeyword_2() { return cResponsableKeyword_2; }
		
		//responsable=[Employee]
		public Assignment getResponsableAssignment_3() { return cResponsableAssignment_3; }
		
		//[Employee]
		public CrossReference getResponsableEmployeeCrossReference_3_0() { return cResponsableEmployeeCrossReference_3_0; }
		
		//ID
		public RuleCall getResponsableEmployeeIDTerminalRuleCall_3_0_1() { return cResponsableEmployeeIDTerminalRuleCall_3_0_1; }
		
		//'description'
		public Keyword getDescriptionKeyword_4() { return cDescriptionKeyword_4; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_5_0() { return cDescriptionSTRINGTerminalRuleCall_5_0; }
		
		//'startDate'
		public Keyword getStartDateKeyword_6() { return cStartDateKeyword_6; }
		
		//startDate=DATE
		public Assignment getStartDateAssignment_7() { return cStartDateAssignment_7; }
		
		//DATE
		public RuleCall getStartDateDATETerminalRuleCall_7_0() { return cStartDateDATETerminalRuleCall_7_0; }
		
		//'duration'
		public Keyword getDurationKeyword_8() { return cDurationKeyword_8; }
		
		//duration=INT
		public Assignment getDurationAssignment_9() { return cDurationAssignment_9; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_9_0() { return cDurationINTTerminalRuleCall_9_0; }
		
		//durationType=DurationType
		public Assignment getDurationTypeAssignment_10() { return cDurationTypeAssignment_10; }
		
		//DurationType
		public RuleCall getDurationTypeDurationTypeEnumRuleCall_10_0() { return cDurationTypeDurationTypeEnumRuleCall_10_0; }
		
		//('subtasks' '{' subtasks+=Task* '}')?
		public Group getGroup_11() { return cGroup_11; }
		
		//'subtasks'
		public Keyword getSubtasksKeyword_11_0() { return cSubtasksKeyword_11_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11_1() { return cLeftCurlyBracketKeyword_11_1; }
		
		//subtasks+=Task*
		public Assignment getSubtasksAssignment_11_2() { return cSubtasksAssignment_11_2; }
		
		//Task
		public RuleCall getSubtasksTaskParserRuleCall_11_2_0() { return cSubtasksTaskParserRuleCall_11_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11_3() { return cRightCurlyBracketKeyword_11_3; }
	}
	
	public class DurationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.home.rh.xtext.RhDsl.DurationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHoursEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHoursHoursKeyword_0_0 = (Keyword)cHoursEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDaysEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDaysDaysKeyword_1_0 = (Keyword)cDaysEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DurationType:
		//	hours | days;
		public EnumRule getRule() { return rule; }
		
		//hours | days
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//hours
		public EnumLiteralDeclaration getHoursEnumLiteralDeclaration_0() { return cHoursEnumLiteralDeclaration_0; }
		
		//'hours'
		public Keyword getHoursHoursKeyword_0_0() { return cHoursHoursKeyword_0_0; }
		
		//days
		public EnumLiteralDeclaration getDaysEnumLiteralDeclaration_1() { return cDaysEnumLiteralDeclaration_1; }
		
		//'days'
		public Keyword getDaysDaysKeyword_1_0() { return cDaysDaysKeyword_1_0; }
	}
	
	private final CompanyElements pCompany;
	private final EmployeeElements pEmployee;
	private final ProjectElements pProject;
	private final TaskElements pTask;
	private final DurationTypeElements eDurationType;
	private final TerminalRule tDATE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RhDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCompany = new CompanyElements();
		this.pEmployee = new EmployeeElements();
		this.pProject = new ProjectElements();
		this.pTask = new TaskElements();
		this.eDurationType = new DurationTypeElements();
		this.tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.home.rh.xtext.RhDsl.DATE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.home.rh.xtext.RhDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Company:
	//	{Company}
	//	'Company'
	//	name=ID
	//	'{' ('employees' '{' employees+=Employee* '}') projects+=Project*
	//	'}';
	public CompanyElements getCompanyAccess() {
		return pCompany;
	}
	
	public ParserRule getCompanyRule() {
		return getCompanyAccess().getRule();
	}
	
	//Employee:
	//	'Employee'
	//	name=ID ('weight' weight=INT)? ('height' height=INT)?;
	public EmployeeElements getEmployeeAccess() {
		return pEmployee;
	}
	
	public ParserRule getEmployeeRule() {
		return getEmployeeAccess().getRule();
	}
	
	//Project:
	//	'Project'
	//	name=ID ('type' type=STRING)
	//	'{'
	//	tasks+=Task* '}';
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//Task:
	//	'Task'
	//	name=ID
	//	'responsable' responsable=[Employee]
	//	'description' description=STRING
	//	'startDate' startDate=DATE
	//	'duration' duration=INT durationType=DurationType ('subtasks' '{' subtasks+=Task* '}')?;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//enum DurationType:
	//	hours | days;
	public DurationTypeElements getDurationTypeAccess() {
		return eDurationType;
	}
	
	public EnumRule getDurationTypeRule() {
		return getDurationTypeAccess().getRule();
	}
	
	//terminal DATE:
	//	('1'..'9' | (!'00' | '0'..'2' '0'..'9' | '3' '0'..'1'))
	//	'/' ('1'..'9' | '1' '0'..'2')
	//	'/' '1' '4'..'6';
	public TerminalRule getDATERule() {
		return tDATE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
